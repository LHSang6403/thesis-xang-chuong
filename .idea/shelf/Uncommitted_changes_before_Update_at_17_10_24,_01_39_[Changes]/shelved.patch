Index: long-short-term-memory-model copy.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Students:\\n\",\n    \"\\n\",\n    \"### Le Hoang Sang\\n\",\n    \"\\n\",\n    \"### Vu Dinh Chuong\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import torch\\n\",\n    \"import torch.nn as nn\\n\",\n    \"import torch.nn.functional as F\\n\",\n    \"import plotly.graph_objects as go\\n\",\n    \"import torch.optim as optim\\n\",\n    \"from torchsummary import summary\\n\",\n    \"from sklearn.preprocessing import MinMaxScaler\\n\",\n    \"from sklearn.preprocessing import StandardScaler\\n\",\n    \"from torch.utils.data import TensorDataset, DataLoader\\n\",\n    \"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\\n\",\n    \"from sklearn.base import MultiOutputMixin, RegressorMixin, BaseEstimator, _fit_context\\n\",\n    \"from abc import ABCMeta, abstractmethod\\n\",\n    \"from sklearn.utils.validation import check_is_fitted, _check_sample_weight\\n\",\n    \"from sklearn.utils.extmath import safe_sparse_dot\\n\",\n    \"from numbers import Integral\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# CLean data\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def clean_data(df):\\n\",\n    \"    print(\\\"Initial data information:\\\")\\n\",\n    \"    print(df.info())\\n\",\n    \"\\n\",\n    \"    # Remove unnecessary columns (if there are columns named 'Unnamed')\\n\",\n    \"    df = df.loc[:, ~df.columns.get_level_values(1).str.contains('^Unnamed')]\\n\",\n    \"\\n\",\n    \"    # Handle the 'timestamp' column (if present)\\n\",\n    \"    if ('timestamp', '') in df.columns:\\n\",\n    \"        # Convert to datetime format\\n\",\n    \"        df[('timestamp', '')] = pd.to_datetime(df[('timestamp', '')], errors='coerce')  \\n\",\n    \"        \\n\",\n    \"        # Remove rows with missing timestamp values\\n\",\n    \"        df = df.dropna(subset=[('timestamp', '')]) \\n\",\n    \"\\n\",\n    \"    # Fill missing values using forward fill and backward fill methods\\n\",\n    \"    df = df.fillna(method='ffill').fillna(method='bfill')\\n\",\n    \"\\n\",\n    \"    # Normalize 'close' values between 0 and 1 if present\\n\",\n    \"    if ('close', '') in df.columns:\\n\",\n    \"        df[('close', '')] = (df[('close', '')] - df[('close', '')].min()) / (df[('close', '')].max() - df[('close', '')].min())\\n\",\n    \"\\n\",\n    \"    # Print out the data after cleaning\\n\",\n    \"    print(\\\"Data after cleaning:\\\")\\n\",\n    \"    print(df.head())\\n\",\n    \"\\n\",\n    \"    return df\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Explain forward fill and backward fill methods\\n\",\n    \"\\n\",\n    \"#### FFill\\n\",\n    \"data = [1, 2, NaN, NaN, 5]\\n\",\n    \"\\n\",\n    \"filled_data = [1, 2, 2, 2, 5]\\n\",\n    \"\\n\",\n    \"=> 'NaN' values replaced with the previous valid value (2).\\n\",\n    \"\\n\",\n    \"#### BFill\\n\",\n    \"data = [1, 2, NaN, NaN, 5]\\n\",\n    \"\\n\",\n    \"filled_data = [1, 2, 5, 5, 5]\\n\",\n    \"\\n\",\n    \"=>'NaN' values replaced with the next valid value (5).\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Explain Min-max Normalization\\n\",\n    \"\\n\",\n    \"normalized_value= (max_value − min_value) / (original_value − min_value)\\n\",\n    \"\\n\",\n    \"\u200B\\n\",\n    \"Example:\\n\",\n    \"\\n\",\n    \"close = [50, 55, 60, 65, 70]\\n\",\n    \"\\n\",\n    \"min(x)=50\\n\",\n    \"max(\uD835\uDC65)=70\\n\",\n    \"\\n\",\n    \"With value 60:\\n\",\n    \"x_normalized = (60−50) / (70−50) = 10 / 20 = 0.5\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Create features\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"In the DataFrame: The dataset we re working with a MultiIndex data structure, where the first level of the index (such as 'A', 'AAL', etc.) represents the stock symbol, and the second level represents the attributes of the stock (such as 'close', 'open', 'high', etc.).\\n\",\n    \"\\n\",\n    \"'A' is a stock symbol representing a specific company or asset.\\n\",\n    \"\\n\",\n    \"Other symbols like 'AAL', 'ZION', etc., represent different companies or assets.\\n\",\n    \"\\n\",\n    \"Why set symbol = 'A'?\\n\",\n    \"\\n\",\n    \"In our code, setting symbol = 'A' focuses on the data of a specific company or asset. \\n\",\n    \"\\n\",\n    \"Since our DataFrame contains data for multiple stock symbols, we need to specify which stock symbol we want to use for feature generation.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def create_features(df):\\n\",\n    \"    df_features = df.copy()\\n\",\n    \"\\n\",\n    \"    print(\\\"Column names in the DataFrame:\\\", df_features.columns)\\n\",\n    \"\\n\",\n    \"    # Define the symbol you want to work with (e.g., 'A', 'AAL', etc.)\\n\",\n    \"    symbol = 'A'\\n\",\n    \"\\n\",\n    \"    # Define the columns for the selected stock symbol\\n\",\n    \"    numeric_cols = [(symbol, 'open'), (symbol, 'high'), (symbol, 'low'), (symbol, 'close'), (symbol, 'volume')]\\n\",\n    \"\\n\",\n    \"    # Check if these columns exist in the DataFrame\\n\",\n    \"    existing_cols = [col for col in numeric_cols if col in df_features.columns]\\n\",\n    \"\\n\",\n    \"    if not existing_cols:\\n\",\n    \"        raise ValueError(\\\"Required numeric columns not found in the DataFrame.\\\")\\n\",\n    \"\\n\",\n    \"    # Convert the necessary columns to numeric type\\n\",\n    \"    df_features[existing_cols] = df_features[existing_cols].apply(pd.to_numeric, errors='coerce')\\n\",\n    \"\\n\",\n    \"    # Remove rows with NaN values after conversion\\n\",\n    \"    df_features = df_features.dropna()\\n\",\n    \"\\n\",\n    \"    # Create features if the necessary columns exist\\n\",\n    \"    if (symbol, 'close') in df_features.columns:\\n\",\n    \"        df_features[(symbol, 'return')] = df_features[(symbol, 'close')].pct_change()\\n\",\n    \"        df_features[(symbol, 'ma7')] = df_features[(symbol, 'close')].rolling(window=7).mean()\\n\",\n    \"        df_features[(symbol, 'ma21')] = df_features[(symbol, 'close')].rolling(window=21).mean()\\n\",\n    \"        df_features[(symbol, 'volatility')] = df_features[(symbol, 'close')].rolling(window=7).std()\\n\",\n    \"    \\n\",\n    \"    if (symbol, 'open') in df_features.columns and (symbol, 'close') in df_features.columns:\\n\",\n    \"        df_features[(symbol, 'open_close_ratio')] = df_features[(symbol, 'open')] / df_features[(symbol, 'close')]\\n\",\n    \"    \\n\",\n    \"    if (symbol, 'high') in df_features.columns and (symbol, 'low') in df_features.columns:\\n\",\n    \"        df_features[(symbol, 'high_low_ratio')] = df_features[(symbol, 'high')] / df_features[(symbol, 'low')]\\n\",\n    \"\\n\",\n    \"    # Remove rows with NaN values due to calculations\\n\",\n    \"    df_features = df_features.dropna()  \\n\",\n    \"\\n\",\n    \"    print(\\\"DataFrame with new features:\\\")\\n\",\n    \"    print(df_features.head())\\n\",\n    \"\\n\",\n    \"    return df_features\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Plot data\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def plot_features(df_features, symbol='A'):\\n\",\n    \"    # Ensure symbol exists in the DataFrame\\n\",\n    \"    if symbol not in df_features.columns.get_level_values(0):\\n\",\n    \"        raise ValueError(f\\\"Symbol '{symbol}' not found in DataFrame columns.\\\")\\n\",\n    \"\\n\",\n    \"    # Plot the 'close' price\\n\",\n    \"    plt.figure(figsize=(14, 7))\\n\",\n    \"    plt.plot(df_features.index, df_features[(symbol, 'close')], label=f'{symbol} Close Price', color='b')\\n\",\n    \"    plt.title(f'{symbol} Close Price Over Time')\\n\",\n    \"    plt.xlabel('Time')\\n\",\n    \"    plt.ylabel('Close Price')\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"    # Plot the 7-day and 21-day moving averages\\n\",\n    \"    plt.figure(figsize=(14, 7))\\n\",\n    \"    plt.plot(df_features.index, df_features[(symbol, 'ma7')], label=f'{symbol} MA7', color='g')\\n\",\n    \"    plt.plot(df_features.index, df_features[(symbol, 'ma21')], label=f'{symbol} MA21', color='r')\\n\",\n    \"    plt.title(f'{symbol} 7-day and 21-day Moving Averages')\\n\",\n    \"    plt.xlabel('Time')\\n\",\n    \"    plt.ylabel('Price')\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"    # Plot the open/close ratio\\n\",\n    \"    plt.figure(figsize=(14, 7))\\n\",\n    \"    plt.plot(df_features.index, df_features[(symbol, 'open_close_ratio')], label=f'{symbol} Open/Close Ratio', color='orange')\\n\",\n    \"    plt.title(f'{symbol} Open/Close Ratio Over Time')\\n\",\n    \"    plt.xlabel('Time')\\n\",\n    \"    plt.ylabel('Ratio')\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"    # Plot the high/low ratio\\n\",\n    \"    plt.figure(figsize=(14, 7))\\n\",\n    \"    plt.plot(df_features.index, df_features[(symbol, 'high_low_ratio')], label=f'{symbol} High/Low Ratio', color='brown')\\n\",\n    \"    plt.title(f'{symbol} High/Low Ratio Over Time')\\n\",\n    \"    plt.xlabel('Time')\\n\",\n    \"    plt.ylabel('Ratio')\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Run flow\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df = pd.read_csv('dataset.csv', index_col=0, header=[0, 1]).sort_index(axis=1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df_cleaned = clean_data(df)\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Get 6 first columns\\n\",\n    \"df_features = create_features(df_cleaned.iloc[:, :5])\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Get data for the symbol 'A'\\n\",\n    \"df1 = df_features.loc[:, 'A']\\n\",\n    \"# Get first 6 columns\\n\",\n    \"df1 = df1.iloc[:, :5]\\n\",\n    \"df1\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Stock symbol 'A' behaviour\\n\",\n    \"df1.plot(subplots=True, figsize=(15, 15))\\n\",\n    \"plt.suptitle('A stock attributes from 24/01/2014 to 25/06/2021', y=0.91)\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Split train from  11/09/2017 9:30 A.M. to 17/01/2018 11:50 A.M and test data  from 17/01/2018 11:51A.M. to 16/02/2018 03:59A.M\\n\",\n    \"train = df1.loc['2017-11-12 09:30:00':'2018-01-30 11:50:00']\\n\",\n    \"test = df1.loc['2018-01-30 11:51:00':'2018-02-16 03:59:00']\\n\",\n    \"train.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Standardize the data\\n\",\n    \"\\n\",\n    \"scaler = StandardScaler()\\n\",\n    \"train_scaled = scaler.fit_transform(train)\\n\",\n    \"test_scaled = scaler.transform(test)\\n\",\n    \"\\n\",\n    \"# Create a function to create sequences of data\\n\",\n    \"\\n\",\n    \"def create_sequences(data, seq_length):\\n\",\n    \"    X, y = [], []\\n\",\n    \"    for i in range(len(data) - seq_length):\\n\",\n    \"        X.append(data[i:i+seq_length])\\n\",\n    \"        y.append(data[i+seq_length])\\n\",\n    \"    return np.array(X), np.array(y)\\n\",\n    \"\\n\",\n    \"# Create sequences with a length of 10\\n\",\n    \"seq_length = 11\\n\",\n    \"X_train, y_train = create_sequences(train_scaled, seq_length)\\n\",\n    \"X_test, y_test = create_sequences(test_scaled, seq_length)\\n\",\n    \"\\n\",\n    \"# Create data loaders\\n\",\n    \"train_data = TensorDataset(torch.tensor(X_train).float(), torch.tensor(y_train).float())\\n\",\n    \"test_data = TensorDataset(torch.tensor(X_test).float(), torch.from_numpy(y_test).float())\\n\",\n    \"\\n\",\n    \"batch_size = 64\\n\",\n    \"train_loader = DataLoader(train_data, shuffle=True, batch_size=batch_size)\\n\",\n    \"test_loader = DataLoader(test_data, shuffle=False, batch_size=batch_size)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from torch import nn\\n\",\n    \"\\n\",\n    \"class VanillaLSTM(nn.Module):\\n\",\n    \"    def __init__(self, num_feature):\\n\",\n    \"        super(VanillaLSTM, self).__init__()\\n\",\n    \"        self.lstm  = nn.LSTM(num_feature,64,batch_first=True)\\n\",\n    \"        self.fc    = nn.Linear(64,num_feature)\\n\",\n    \"        \\n\",\n    \"    def forward(self, x):\\n\",\n    \"        output, (hidden, cell) = self.lstm(x)\\n\",\n    \"        x = self.fc(hidden)\\n\",\n    \"        return x\\n\",\n    \"\\n\",\n    \"model = VanillaLSTM(5)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Optiemizer and rmse loss function\\n\",\n    \"import torch.optim as optim\\n\",\n    \"\\n\",\n    \"class RMSELoss(nn.Module):\\n\",\n    \"    def __init__(self):\\n\",\n    \"        super().__init__()\\n\",\n    \"        self.mse = nn.MSELoss()\\n\",\n    \"        \\n\",\n    \"    def forward(self,yhat,y):\\n\",\n    \"        return torch.sqrt(self.mse(yhat,y))\\n\",\n    \"\\n\",\n    \"criterion = RMSELoss()\\n\",\n    \"optimizer = optim.Adam(model.parameters(), lr=0.01)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def train(dataloader):\\n\",\n    \"    epoch_loss = 0\\n\",\n    \"    model.train()  \\n\",\n    \"    \\n\",\n    \"    for batch in dataloader:\\n\",\n    \"        optimizer.zero_grad()          \\n\",\n    \"        x,y = batch\\n\",\n    \"        pred = model(x)\\n\",\n    \"        loss = criterion(pred[0],y)        \\n\",\n    \"        loss.backward()               \\n\",\n    \"        optimizer.step()      \\n\",\n    \"        epoch_loss += loss.item()  \\n\",\n    \"        \\n\",\n    \"    return epoch_loss\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def evaluate(dataloader):\\n\",\n    \"    epoch_loss = 0\\n\",\n    \"    model.eval()  \\n\",\n    \"    \\n\",\n    \"    with torch.no_grad():\\n\",\n    \"      for batch in dataloader:   \\n\",\n    \"          x,y= batch\\n\",\n    \"          pred = model(x)\\n\",\n    \"          loss = criterion(pred[0],y)              \\n\",\n    \"          epoch_loss += loss.item()  \\n\",\n    \"        \\n\",\n    \"    return epoch_loss / len(dataloader)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"n_epochs = 600\\n\",\n    \"best_valid_loss = float('inf')\\n\",\n    \"\\n\",\n    \"for epoch in range(1, n_epochs + 1):\\n\",\n    \"    train_loss = train(train_loader)\\n\",\n    \"    valid_loss = evaluate(test_loader)\\n\",\n    \"    \\n\",\n    \"    #save the best model\\n\",\n    \"    if valid_loss < best_valid_loss:\\n\",\n    \"        best_valid_loss = valid_loss\\n\",\n    \"        torch.save(model, './checkpoint/saved_weights.pt')\\n\",\n    \"\\n\",\n    \"    if (epoch % 200 == 0):\\n\",\n    \"        print(f'\\\\tEpoch: {epoch} | ' + f'\\\\tTrain Loss: {train_loss:.5f} | ' + f'\\\\tVal Loss: {valid_loss:.5f}\\\\n')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"model=torch.load('./checkpoint/saved_weights.pt')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"X_test = torch.tensor(X_test).float()\\n\",\n    \"\\n\",\n    \"with torch.no_grad():\\n\",\n    \"  y_test_pred = model(X_test)\\n\",\n    \"\\n\",\n    \"y_test_pred = y_test_pred.numpy()[0]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"rmse = np.sqrt(mean_squared_error(y_test, y_test_pred, multioutput='raw_values'))\\n\",\n    \"mse = mean_squared_error(y_test, y_test_pred, multioutput='raw_values')\\n\",\n    \"mae = mean_absolute_error(y_test, y_test_pred, multioutput='raw_values')\\n\",\n    \"r2 = r2_score(y_test, y_test_pred, multioutput='raw_values')\\n\",\n    \"index = ['RMSE','MSE', 'MAE', 'R2 score']\\n\",\n    \"\\n\",\n    \"results = pd.DataFrame([rmse, mse, mae, r2], index=index, columns=['close','high','low','open','volume'])\\n\",\n    \"results\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"train = df1.loc['2017-11-12 09:30:00':'2018-01-30 11:50:00'] \\n\",\n    \"\\n\",\n    \"test = df1.loc['2018-01-30 11:51:00':'2018-02-16 03:59:00']\\n\",\n    \"\\n\",\n    \"<div>\\n\",\n    \"<style scoped>\\n\",\n    \"    .dataframe tbody tr th:only-of-type {\\n\",\n    \"        vertical-align: middle;\\n\",\n    \"    }\\n\",\n    \"\\n\",\n    \"    .dataframe tbody tr th {\\n\",\n    \"        vertical-align: top;\\n\",\n    \"    }\\n\",\n    \"\\n\",\n    \"    .dataframe thead th {\\n\",\n    \"        text-align: right;\\n\",\n    \"    }\\n\",\n    \"</style>\\n\",\n    \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n    \"  <thead>\\n\",\n    \"    <tr style=\\\"text-align: right;\\\">\\n\",\n    \"      <th></th>\\n\",\n    \"      <th>close</th>\\n\",\n    \"      <th>high</th>\\n\",\n    \"      <th>low</th>\\n\",\n    \"      <th>open</th>\\n\",\n    \"      <th>volume</th>\\n\",\n    \"    </tr>\\n\",\n    \"  </thead>\\n\",\n    \"  <tbody>\\n\",\n    \"    <tr>\\n\",\n    \"      <th>RMSE</th>\\n\",\n    \"      <td>0.045912</td>\\n\",\n    \"      <td>0.043599</td>\\n\",\n    \"      <td>0.044478</td>\\n\",\n    \"      <td>0.040182</td>\\n\",\n    \"      <td>0.671828</td>\\n\",\n    \"    </tr>\\n\",\n    \"    <tr>\\n\",\n    \"      <th>MSE</th>\\n\",\n    \"      <td>0.002108</td>\\n\",\n    \"      <td>0.001901</td>\\n\",\n    \"      <td>0.001978</td>\\n\",\n    \"      <td>0.001615</td>\\n\",\n    \"      <td>0.451353</td>\\n\",\n    \"    </tr>\\n\",\n    \"    <tr>\\n\",\n    \"      <th>MAE</th>\\n\",\n    \"      <td>0.024092</td>\\n\",\n    \"      <td>0.018686</td>\\n\",\n    \"      <td>0.021166</td>\\n\",\n    \"      <td>0.014628</td>\\n\",\n    \"      <td>0.253309</td>\\n\",\n    \"    </tr>\\n\",\n    \"    <tr>\\n\",\n    \"      <th>R2 score</th>\\n\",\n    \"      <td>0.998083</td>\\n\",\n    \"      <td>0.998259</td>\\n\",\n    \"      <td>0.998214</td>\\n\",\n    \"      <td>0.998533</td>\\n\",\n    \"      <td>0.272340</td>\\n\",\n    \"    </tr>\\n\",\n    \"  </tbody>\\n\",\n    \"</table>\\n\",\n    \"</div>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"fig, ax = plt.subplots(nrows=1, ncols=5)\\n\",\n    \"fig.set_figwidth(25)\\n\",\n    \"fig.set_figheight(5)\\n\",\n    \"for i in range(5):\\n\",\n    \"    ax[i].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test.shape[0]),\\n\",\n    \"         y_test[:,i], color='black', label='test target')\\n\",\n    \"\\n\",\n    \"    ax[i].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test_pred.shape[0]),\\n\",\n    \"         y_test_pred[:,i], color='red', label='test prediction')\\n\",\n    \"\\n\",\n    \"    ax[i].set_xlabel('time [days]')\\n\",\n    \"    ax[i].set_ylabel('price')\\n\",\n    \"    ax[i].legend(loc='best')\\n\",\n    \"\\n\",\n    \"ax[0].set_title('future close prices')\\n\",\n    \"ax[1].set_title('future high prices')\\n\",\n    \"ax[2].set_title('future low prices')\\n\",\n    \"ax[3].set_title('future open prices')\\n\",\n    \"ax[4].set_title('future volume prices')\\n\",\n    \"\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 49,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"ValueError\",\n     \"evalue\": \"operands could not be broadcast together with shapes (10,5) (10,) (10,5) \",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[1;31mValueError\\u001b[0m                                Traceback (most recent call last)\",\n      \"Cell \\u001b[1;32mIn[49], line 23\\u001b[0m\\n\\u001b[0;32m     20\\u001b[0m pred_mins \\u001b[38;5;241m=\\u001b[39m last_sequence\\u001b[38;5;241m.\\u001b[39msqueeze(\\u001b[38;5;241m0\\u001b[39m)\\u001b[38;5;241m.\\u001b[39mnumpy()\\n\\u001b[0;32m     22\\u001b[0m \\u001b[38;5;66;03m# inverse transform the predicted values\\u001b[39;00m\\n\\u001b[1;32m---> 23\\u001b[0m pred_mins \\u001b[38;5;241m=\\u001b[39m \\u001b[43mscaler\\u001b[49m\\u001b[38;5;241;43m.\\u001b[39;49m\\u001b[43minverse_transform\\u001b[49m\\u001b[43m(\\u001b[49m\\u001b[43mpred_mins\\u001b[49m\\u001b[43m)\\u001b[49m\\n\\u001b[0;32m     25\\u001b[0m df_pred \\u001b[38;5;241m=\\u001b[39m pd\\u001b[38;5;241m.\\u001b[39mDataFrame(\\n\\u001b[0;32m     26\\u001b[0m     data\\u001b[38;5;241m=\\u001b[39mpred_mins,\\n\\u001b[0;32m     27\\u001b[0m     columns\\u001b[38;5;241m=\\u001b[39m[\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Open>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<High>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Low>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Close>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Volume>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m]\\n\\u001b[0;32m     28\\u001b[0m )\\n\\u001b[0;32m     30\\u001b[0m df_pred\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\LT MSI\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\sklearn\\\\preprocessing\\\\_data.py:1064\\u001b[0m, in \\u001b[0;36mStandardScaler.inverse_transform\\u001b[1;34m(self, X, copy)\\u001b[0m\\n\\u001b[0;32m   1062\\u001b[0m \\u001b[38;5;28;01melse\\u001b[39;00m:\\n\\u001b[0;32m   1063\\u001b[0m     \\u001b[38;5;28;01mif\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mwith_std:\\n\\u001b[1;32m-> 1064\\u001b[0m         \\u001b[43mX\\u001b[49m\\u001b[43m \\u001b[49m\\u001b[38;5;241;43m*\\u001b[39;49m\\u001b[38;5;241;43m=\\u001b[39;49m\\u001b[43m \\u001b[49m\\u001b[38;5;28;43mself\\u001b[39;49m\\u001b[38;5;241;43m.\\u001b[39;49m\\u001b[43mscale_\\u001b[49m\\n\\u001b[0;32m   1065\\u001b[0m     \\u001b[38;5;28;01mif\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mwith_mean:\\n\\u001b[0;32m   1066\\u001b[0m         X \\u001b[38;5;241m+\\u001b[39m\\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mmean_\\n\",\n      \"\\u001b[1;31mValueError\\u001b[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) \"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Predicting the next 1 mins\\n\",\n    \"seq_len = 11\\n\",\n    \"sequences = []\\n\",\n    \"for index in range(len(test) - seq_len + 1): \\n\",\n    \"    sequences.append(test[index: index + seq_len])\\n\",\n    \"sequences = np.array(sequences)\\n\",\n    \"\\n\",\n    \"last_sequence = sequences[-1:, 1:, :]\\n\",\n    \"last_sequence = torch.from_numpy(last_sequence).float()\\n\",\n    \"\\n\",\n    \"# Generate predictions\\n\",\n    \"PREDICT = 1\\n\",\n    \"with torch.no_grad():\\n\",\n    \"    for i in range(PREDICT):\\n\",\n    \"        pred_i = model(last_sequence)\\n\",\n    \"        last_sequence = torch.cat((last_sequence, pred_i), dim=1)\\n\",\n    \"        last_sequence = last_sequence[:, 1:, :]\\n\",\n    \"\\n\",\n    \"pred_mins = last_sequence.squeeze(0).numpy()\\n\",\n    \"\\n\",\n    \"# inverse transform the predicted values\\n\",\n    \"pred_mins = scaler.inverse_transform(pred_mins)\\n\",\n    \"\\n\",\n    \"df_pred = pd.DataFrame(\\n\",\n    \"    data=pred_mins,\\n\",\n    \"    columns=['<Open>', '<High>', '<Low>', '<Close>', '<Volume>']\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"print(def_pred)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 50,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"ValueError\",\n     \"evalue\": \"operands could not be broadcast together with shapes (10,5) (10,) (10,5) \",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[1;31mValueError\\u001b[0m                                Traceback (most recent call last)\",\n      \"Cell \\u001b[1;32mIn[50], line 23\\u001b[0m\\n\\u001b[0;32m     20\\u001b[0m pred_mins \\u001b[38;5;241m=\\u001b[39m last_sequence\\u001b[38;5;241m.\\u001b[39msqueeze(\\u001b[38;5;241m0\\u001b[39m)\\u001b[38;5;241m.\\u001b[39mnumpy()\\n\\u001b[0;32m     22\\u001b[0m \\u001b[38;5;66;03m# inverse transform the predicted values\\u001b[39;00m\\n\\u001b[1;32m---> 23\\u001b[0m pred_mins \\u001b[38;5;241m=\\u001b[39m \\u001b[43mscaler\\u001b[49m\\u001b[38;5;241;43m.\\u001b[39;49m\\u001b[43minverse_transform\\u001b[49m\\u001b[43m(\\u001b[49m\\u001b[43mpred_mins\\u001b[49m\\u001b[43m)\\u001b[49m\\n\\u001b[0;32m     25\\u001b[0m df_pred \\u001b[38;5;241m=\\u001b[39m pd\\u001b[38;5;241m.\\u001b[39mDataFrame(\\n\\u001b[0;32m     26\\u001b[0m     data\\u001b[38;5;241m=\\u001b[39mpred_mins,\\n\\u001b[0;32m     27\\u001b[0m     columns\\u001b[38;5;241m=\\u001b[39m[\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Open>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<High>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Low>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Close>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Volume>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m]\\n\\u001b[0;32m     28\\u001b[0m )\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\LT MSI\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\sklearn\\\\preprocessing\\\\_data.py:1064\\u001b[0m, in \\u001b[0;36mStandardScaler.inverse_transform\\u001b[1;34m(self, X, copy)\\u001b[0m\\n\\u001b[0;32m   1062\\u001b[0m \\u001b[38;5;28;01melse\\u001b[39;00m:\\n\\u001b[0;32m   1063\\u001b[0m     \\u001b[38;5;28;01mif\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mwith_std:\\n\\u001b[1;32m-> 1064\\u001b[0m         \\u001b[43mX\\u001b[49m\\u001b[43m \\u001b[49m\\u001b[38;5;241;43m*\\u001b[39;49m\\u001b[38;5;241;43m=\\u001b[39;49m\\u001b[43m \\u001b[49m\\u001b[38;5;28;43mself\\u001b[39;49m\\u001b[38;5;241;43m.\\u001b[39;49m\\u001b[43mscale_\\u001b[49m\\n\\u001b[0;32m   1065\\u001b[0m     \\u001b[38;5;28;01mif\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mwith_mean:\\n\\u001b[0;32m   1066\\u001b[0m         X \\u001b[38;5;241m+\\u001b[39m\\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mmean_\\n\",\n      \"\\u001b[1;31mValueError\\u001b[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) \"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Predicting the next 5 mins\\n\",\n    \"\\n\",\n    \"seq_len = 11\\n\",\n    \"sequences = []\\n\",\n    \"for index in range(len(test) - seq_len + 1): \\n\",\n    \"    sequences.append(test[index: index + seq_len])\\n\",\n    \"sequences = np.array(sequences)\\n\",\n    \"\\n\",\n    \"last_sequence = sequences[-1:, 1:, :]\\n\",\n    \"last_sequence = torch.from_numpy(last_sequence).float()\\n\",\n    \"\\n\",\n    \"# Generate predictions\\n\",\n    \"PREDICT = 5\\n\",\n    \"with torch.no_grad():\\n\",\n    \"    for i in range(PREDICT):\\n\",\n    \"        pred_i = model(last_sequence)\\n\",\n    \"        last_sequence = torch.cat((last_sequence, pred_i), dim=1)\\n\",\n    \"        last_sequence = last_sequence[:, 1:, :]\\n\",\n    \"\\n\",\n    \"pred_mins = last_sequence.squeeze(0).numpy()\\n\",\n    \"\\n\",\n    \"# inverse transform the predicted values\\n\",\n    \"pred_mins = scaler.inverse_transform(pred_mins)\\n\",\n    \"\\n\",\n    \"df_pred = pd.DataFrame(\\n\",\n    \"    data=pred_mins,\\n\",\n    \"    columns=['<Open>', '<High>', '<Low>', '<Close>', '<Volume>']\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 51,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"ValueError\",\n     \"evalue\": \"operands could not be broadcast together with shapes (10,5) (10,) (10,5) \",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[1;31mValueError\\u001b[0m                                Traceback (most recent call last)\",\n      \"Cell \\u001b[1;32mIn[51], line 23\\u001b[0m\\n\\u001b[0;32m     20\\u001b[0m pred_mins \\u001b[38;5;241m=\\u001b[39m last_sequence\\u001b[38;5;241m.\\u001b[39msqueeze(\\u001b[38;5;241m0\\u001b[39m)\\u001b[38;5;241m.\\u001b[39mnumpy()\\n\\u001b[0;32m     22\\u001b[0m \\u001b[38;5;66;03m# inverse transform the predicted values\\u001b[39;00m\\n\\u001b[1;32m---> 23\\u001b[0m pred_days \\u001b[38;5;241m=\\u001b[39m \\u001b[43mscaler\\u001b[49m\\u001b[38;5;241;43m.\\u001b[39;49m\\u001b[43minverse_transform\\u001b[49m\\u001b[43m(\\u001b[49m\\u001b[43mpred_days\\u001b[49m\\u001b[43m)\\u001b[49m\\n\\u001b[0;32m     25\\u001b[0m df_pred \\u001b[38;5;241m=\\u001b[39m pd\\u001b[38;5;241m.\\u001b[39mDataFrame(\\n\\u001b[0;32m     26\\u001b[0m     data\\u001b[38;5;241m=\\u001b[39mpred_days,\\n\\u001b[0;32m     27\\u001b[0m     columns\\u001b[38;5;241m=\\u001b[39m[\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Open>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<High>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Low>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Close>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m<Volume>\\u001b[39m\\u001b[38;5;124m'\\u001b[39m]\\n\\u001b[0;32m     28\\u001b[0m )\\n\",\n      \"File \\u001b[1;32mc:\\\\Users\\\\LT MSI\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\sklearn\\\\preprocessing\\\\_data.py:1064\\u001b[0m, in \\u001b[0;36mStandardScaler.inverse_transform\\u001b[1;34m(self, X, copy)\\u001b[0m\\n\\u001b[0;32m   1062\\u001b[0m \\u001b[38;5;28;01melse\\u001b[39;00m:\\n\\u001b[0;32m   1063\\u001b[0m     \\u001b[38;5;28;01mif\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mwith_std:\\n\\u001b[1;32m-> 1064\\u001b[0m         \\u001b[43mX\\u001b[49m\\u001b[43m \\u001b[49m\\u001b[38;5;241;43m*\\u001b[39;49m\\u001b[38;5;241;43m=\\u001b[39;49m\\u001b[43m \\u001b[49m\\u001b[38;5;28;43mself\\u001b[39;49m\\u001b[38;5;241;43m.\\u001b[39;49m\\u001b[43mscale_\\u001b[49m\\n\\u001b[0;32m   1065\\u001b[0m     \\u001b[38;5;28;01mif\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mwith_mean:\\n\\u001b[0;32m   1066\\u001b[0m         X \\u001b[38;5;241m+\\u001b[39m\\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mmean_\\n\",\n      \"\\u001b[1;31mValueError\\u001b[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) \"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Predicting the next 10 mins\\n\",\n    \"\\n\",\n    \"seq_len = 11\\n\",\n    \"sequences = []\\n\",\n    \"for index in range(len(test) - seq_len + 1): \\n\",\n    \"    sequences.append(test[index: index + seq_len])\\n\",\n    \"sequences = np.array(sequences)\\n\",\n    \"\\n\",\n    \"last_sequence = sequences[-1:, 1:, :]\\n\",\n    \"last_sequence = torch.from_numpy(last_sequence).float()\\n\",\n    \"\\n\",\n    \"# Generate predictions\\n\",\n    \"PREDICT = 10\\n\",\n    \"with torch.no_grad():\\n\",\n    \"    for i in range(PREDICT):\\n\",\n    \"        pred_i = model(last_sequence)\\n\",\n    \"        last_sequence = torch.cat((last_sequence, pred_i), dim=1)\\n\",\n    \"        last_sequence = last_sequence[:, 1:, :]\\n\",\n    \"\\n\",\n    \"pred_mins = last_sequence.squeeze(0).numpy()\\n\",\n    \"\\n\",\n    \"# inverse transform the predicted values\\n\",\n    \"pred_mins = scaler.inverse_transform(pred_mins)\\n\",\n    \"\\n\",\n    \"df_pred = pd.DataFrame(\\n\",\n    \"    data=pred_mins,\\n\",\n    \"    columns=['<Open>', '<High>', '<Low>', '<Close>', '<Volume>']\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# df_features = create_features(df_cleaned)\\n\",\n    \"\\n\",\n    \"# print('features', df_features.head())\\n\",\n    \"\\n\",\n    \"# plot_features(df_features, symbol='A')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 10 Feature and technical indicator\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Add EMA12, EMA25, MACD, Boillinger Up and Boillinger Down to df2 dataframe\\n\",\n    \"df2 = df_features.loc[:, 'A']\\n\",\n    \"df2 = df2.iloc[:, :5]\\n\",\n    \"df2['EMA12'] = df2['close'].ewm(span=12, adjust=False).mean()\\n\",\n    \"df2['EMA26'] = df2['close'].ewm(span=26, adjust=False).mean()\\n\",\n    \"df2['MACD'] = df2['EMA12'] - df2['EMA26']\\n\",\n    \"df2['Boillinger Up'] = df2['close'].rolling(window=20).mean() + 2*df2['close'].rolling(window=20).std()\\n\",\n    \"df2['Boillinger Down'] = df2['close'].rolling(window=20).mean() - 2*df2['close'].rolling(window=20).std()\\n\",\n    \"df2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"train2 = df2.loc['2017-11-12 09:30:00':'2018-01-30 11:50:00']\\n\",\n    \"test2 = df2.loc['2018-01-30 11:51:00':'2018-02-16 03:59:00']\\n\",\n    \"# Standardize the data\\n\",\n    \"\\n\",\n    \"scaler = StandardScaler()\\n\",\n    \"train_scaled2 = scaler.fit_transform(train2)\\n\",\n    \"test_scaled2 = scaler.transform(test2)\\n\",\n    \"\\n\",\n    \"# Create a function to create sequences of data\\n\",\n    \"\\n\",\n    \"def create_sequences(data, seq_length):\\n\",\n    \"    X, y = [], []\\n\",\n    \"    for i in range(len(data) - seq_length):\\n\",\n    \"        X.append(data[i:i+seq_length])\\n\",\n    \"        y.append(data[i+seq_length])\\n\",\n    \"    return np.array(X), np.array(y)\\n\",\n    \"\\n\",\n    \"# Create sequences with a length of 10\\n\",\n    \"seq_length = 11\\n\",\n    \"X_train2, y_train2 = create_sequences(train_scaled2, seq_length)\\n\",\n    \"X_test2, y_test2 = create_sequences(test_scaled2, seq_length)\\n\",\n    \"\\n\",\n    \"# Create data loaders\\n\",\n    \"train_data2 = TensorDataset(torch.tensor(X_train2).float(), torch.tensor(y_train2).float())\\n\",\n    \"test_data2 = TensorDataset(torch.tensor(X_test2).float(), torch.from_numpy(y_test2).float())\\n\",\n    \"\\n\",\n    \"batch_size = 64\\n\",\n    \"train_loader2 = DataLoader(train_data2, shuffle=True, batch_size=batch_size)\\n\",\n    \"test_loader2 = DataLoader(test_data2, shuffle=False, batch_size=batch_size)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"n_epochs = 600\\n\",\n    \"best_valid_loss = float('inf')\\n\",\n    \"\\n\",\n    \"for epoch in range(1, n_epochs + 1):\\n\",\n    \"    train_loss = train(train_loader2)\\n\",\n    \"    valid_loss = evaluate(test_loader2)\\n\",\n    \"    \\n\",\n    \"    #save the best model\\n\",\n    \"    if valid_loss < best_valid_loss:\\n\",\n    \"        best_valid_loss = valid_loss\\n\",\n    \"        torch.save(model, './checkpoint/saved_weights2.pt')\\n\",\n    \"\\n\",\n    \"    if (epoch % 200 == 0):\\n\",\n    \"        print(f'\\\\tEpoch: {epoch} | ' + f'\\\\tTrain Loss: {train_loss:.5f} | ' + f'\\\\tVal Loss: {valid_loss:.5f}\\\\n')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"model=torch.load('./checkpoint/saved_weights2.pt')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"X_test2 = torch.tensor(X_test2).float()\\n\",\n    \"\\n\",\n    \"with torch.no_grad():\\n\",\n    \"  y_test_pred2 = model(X_test2)\\n\",\n    \"  \\n\",\n    \"y_test_pred2 = y_test_pred2.numpy()[0]\\n\",\n    \"\\n\",\n    \"rmse = np.sqrt(mean_squared_error(y_test2, y_test_pred2, multioutput='raw_values'))\\n\",\n    \"mse = mean_squared_error(y_test2, y_test_pred2, multioutput='raw_values')\\n\",\n    \"mae = mean_absolute_error(y_test2, y_test_pred2, multioutput='raw_values')\\n\",\n    \"r2 = r2_score(y_test2, y_test_pred2, multioutput='raw_values')\\n\",\n    \"index = ['RMSE','MSE', 'MAE', 'R2 score']\\n\",\n    \"\\n\",\n    \"results = pd.DataFrame([rmse, mse, mae, r2], index=index, columns=['close','high','low','open','volume', 'EMA12', 'EMA26', 'MACD', 'Boillinger Up', 'Boillinger Down'])\\n\",\n    \"results\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"fig, ax = plt.subplots(nrows=1, ncols=5)\\n\",\n    \"fig.set_figwidth(25)\\n\",\n    \"fig.set_figheight(5)\\n\",\n    \"for i in range(5):\\n\",\n    \"    ax[i].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test.shape[0]),\\n\",\n    \"         y_test[:,i], color='black', label='test target')\\n\",\n    \"\\n\",\n    \"    ax[i].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test_pred.shape[0]),\\n\",\n    \"         y_test_pred[:,i], color='red', label='test prediction')\\n\",\n    \"\\n\",\n    \"    ax[i].set_xlabel('time [days]')\\n\",\n    \"    ax[i].set_ylabel('price')\\n\",\n    \"    ax[i].legend(loc='best')\\n\",\n    \"\\n\",\n    \"ax[0].set_title('future close prices')\\n\",\n    \"ax[1].set_title('future high prices')\\n\",\n    \"ax[2].set_title('future low prices')\\n\",\n    \"ax[3].set_title('future open prices')\\n\",\n    \"ax[4].set_title('future volume prices')\\n\",\n    \"\\n\",\n    \"# Show EMA12, EMA25, MACD, Boillinger Up and Boillinger Down base one the close price\\n\",\n    \"fig, ax = plt.subplots(nrows=1, ncols=5)\\n\",\n    \"fig.set_figwidth(25)\\n\",\n    \"fig.set_figheight(5)\\n\",\n    \"\\n\",\n    \"ax[0].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test.shape[0]),\\n\",\n    \"          y_test[:,5], color='black', label='test target')\\n\",\n    \"\\n\",\n    \"ax[0].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test_pred.shape[0]),\\n\",\n    \"          y_test_pred[:,5], color='red', label='test prediction')\\n\",\n    \"\\n\",\n    \"ax[0].set_xlabel('time [days]')\\n\",\n    \"ax[0].set_ylabel('price')\\n\",\n    \"ax[0].legend(loc='best')\\n\",\n    \"ax[0].set_title('future EMA12 prices')\\n\",\n    \"\\n\",\n    \"ax[1].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test.shape[0]),\\n\",\n    \"          y_test[:,6], color='black', label='test target')\\n\",\n    \"\\n\",\n    \"ax[1].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test_pred.shape[0]),\\n\",\n    \"          y_test_pred[:,6], color='red', label='test prediction')\\n\",\n    \"\\n\",\n    \"ax[1].set_xlabel('time [days]')\\n\",\n    \"ax[1].set_ylabel('price')\\n\",\n    \"ax[1].legend(loc='best')\\n\",\n    \"ax[1].set_title('future EMA26 prices')\\n\",\n    \"\\n\",\n    \"ax[2].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test.shape[0]),\\n\",\n    \"          y_test[:,7], color='black', label='test target')  \\n\",\n    \"ax[2].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test_pred.shape[0]), \\n\",\n    \"          y_test_pred[:,7], color='red', label='test prediction')\\n\",\n    \"ax[2].set_xlabel('time [days]') \\n\",\n    \"ax[2].set_ylabel('price')\\n\",\n    \"ax[2].legend(loc='best')\\n\",\n    \"ax[2].set_title('future MACD prices')\\n\",\n    \"\\n\",\n    \"ax[3].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test.shape[0]),\\n\",\n    \"          y_test[:,8], color='black', label='test target')\\n\",\n    \"ax[3].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test_pred.shape[0]),\\n\",\n    \"          y_test_pred[:,8], color='red', label='test prediction')\\n\",\n    \"ax[3].set_xlabel('time [days]')\\n\",\n    \"ax[3].set_ylabel('price')\\n\",\n    \"ax[3].legend(loc='best')\\n\",\n    \"ax[3].set_title('future Boillinger Up prices')\\n\",\n    \"\\n\",\n    \"ax[4].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test.shape[0]),\\n\",\n    \"          y_test[:,9], color='black', label='test target')\\n\",\n    \"ax[4].plot(np.arange(y_train.shape[0], y_train.shape[0]+y_test_pred.shape[0]),  \\n\",\n    \"          y_test_pred[:,9], color='red', label='test prediction')\\n\",\n    \"ax[4].set_xlabel('time [days]')\\n\",\n    \"ax[4].set_ylabel('price') \\n\",\n    \"ax[4].legend(loc='best')\\n\",\n    \"ax[4].set_title('future Boillinger Down prices')\\n\",\n    \"\\n\",\n    \"plt.show()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Predicting the next 10 mins\\n\",\n    \"seq_len = 11\\n\",\n    \"sequences = []\\n\",\n    \"for index in range(len(test) - seq_len + 1): \\n\",\n    \"    sequences.append(test[index: index + seq_len])\\n\",\n    \"sequences = np.array(sequences)\\n\",\n    \"\\n\",\n    \"last_sequence = sequences[-1:, 1:, :]\\n\",\n    \"last_sequence = torch.from_numpy(last_sequence).float()\\n\",\n    \"\\n\",\n    \"# Generate predictions\\n\",\n    \"PREDICT = 10\\n\",\n    \"with torch.no_grad():\\n\",\n    \"    for i in range(PREDICT):\\n\",\n    \"        pred_i = model(last_sequence)\\n\",\n    \"        last_sequence = torch.cat((last_sequence, pred_i), dim=1)\\n\",\n    \"        last_sequence = last_sequence[:, 1:, :]\\n\",\n    \"\\n\",\n    \"pred_mins = last_sequence.squeeze(0).numpy()\\n\",\n    \"\\n\",\n    \"# inverse transform the predicted values\\n\",\n    \"pred_mins = scaler.inverse_transform(pred_mins)\\n\",\n    \"\\n\",\n    \"df_pred = pd.DataFrame(\\n\",\n    \"    data=pred_mins,\\n\",\n    \"    columns=['<Open>', '<High>', '<Low>', '<Close>', '<Volume>', '<EMA12>', '<EMA26>', '<MACD>', '<Boillinger Up>', '<Boillinger Down>']\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"print(def_pred)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"py4math\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.0\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/long-short-term-memory-model copy.ipynb b/long-short-term-memory-model copy.ipynb
--- a/long-short-term-memory-model copy.ipynb	(revision 2869f8c2ea46254599cbef3958b2ad3076c8f61f)
+++ b/long-short-term-memory-model copy.ipynb	(date 1729103780441)
@@ -13,9 +13,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:21.089433Z",
+     "start_time": "2024-10-16T18:33:17.222440Z"
+    }
+   },
    "source": [
     "import os\n",
     "import pandas as pd\n",
@@ -36,7 +39,9 @@
     "from sklearn.utils.validation import check_is_fitted, _check_sample_weight\n",
     "from sklearn.utils.extmath import safe_sparse_dot\n",
     "from numbers import Integral"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 1
   },
   {
    "cell_type": "markdown",
@@ -47,9 +52,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:21.104079Z",
+     "start_time": "2024-10-16T18:33:21.100444Z"
+    }
+   },
    "source": [
     "def clean_data(df):\n",
     "    print(\"Initial data information:\")\n",
@@ -78,7 +86,9 @@
     "    print(df.head())\n",
     "\n",
     "    return df\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 2
   },
   {
    "cell_type": "markdown",
@@ -147,9 +157,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:21.112562Z",
+     "start_time": "2024-10-16T18:33:21.107926Z"
+    }
+   },
    "source": [
     "def create_features(df):\n",
     "    df_features = df.copy()\n",
@@ -194,7 +207,9 @@
     "    print(df_features.head())\n",
     "\n",
     "    return df_features"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 3
   },
   {
    "cell_type": "markdown",
@@ -205,9 +220,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:21.210228Z",
+     "start_time": "2024-10-16T18:33:21.205937Z"
+    }
+   },
    "source": [
     "def plot_features(df_features, symbol='A'):\n",
     "    # Ensure symbol exists in the DataFrame\n",
@@ -250,7 +268,9 @@
     "    plt.ylabel('Ratio')\n",
     "    plt.legend()\n",
     "    plt.show()"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 4
   },
   {
    "cell_type": "markdown",
@@ -261,82 +281,392 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:28.038515Z",
+     "start_time": "2024-10-16T18:33:21.215347Z"
+    }
+   },
    "source": [
     "df = pd.read_csv('dataset.csv', index_col=0, header=[0, 1]).sort_index(axis=1)"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 5
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:28.058328Z",
+     "start_time": "2024-10-16T18:33:28.056909Z"
+    }
+   },
+   "source": [],
    "outputs": [],
-   "source": []
+   "execution_count": null
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:32.168258Z",
+     "start_time": "2024-10-16T18:33:28.070175Z"
+    }
+   },
    "source": [
     "df_cleaned = clean_data(df)\n",
     "\n"
-   ]
+   ],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Initial data information:\n",
+      "<class 'pandas.core.frame.DataFrame'>\n",
+      "Index: 43146 entries, 2017-09-11 09:30:00 to 2018-02-16 15:59:00\n",
+      "Columns: 2510 entries, ('A', 'close') to ('ZTS', 'volume')\n",
+      "dtypes: float64(2510)\n",
+      "memory usage: 826.6+ MB\n",
+      "None\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/var/folders/m1/kw3tpwys1m5bzfrsgxqkn4140000gn/T/ipykernel_89103/82415326.py:17: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
+      "  df = df.fillna(method='ffill').fillna(method='bfill')\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Data after cleaning:\n",
+      "                         A                                      AAL         \\\n",
+      "                     close   high      low     open   volume  close   high   \n",
+      "timestamp                                                                    \n",
+      "2017-09-11 09:30:00  65.46  65.50  65.4100  65.5000  29852.0  44.01  44.05   \n",
+      "2017-09-11 09:31:00  65.46  65.50  65.4100  65.5000  29852.0  44.25  44.25   \n",
+      "2017-09-11 09:32:00  65.66  65.66  65.4604  65.4604   3435.0  44.27  44.32   \n",
+      "2017-09-11 09:33:00  65.69  65.70  65.6200  65.6700    700.0  44.34  44.46   \n",
+      "2017-09-11 09:34:00  65.88  65.88  65.6800  65.6900   2814.0  44.24  44.36   \n",
+      "\n",
+      "                                              ...   ZION                       \\\n",
+      "                         low   open   volume  ...  close   high    low   open   \n",
+      "timestamp                                     ...                               \n",
+      "2017-09-11 09:30:00  44.0100  44.01  39049.0  ...  42.04  42.05  42.04  42.05   \n",
+      "2017-09-11 09:31:00  44.0000  44.01  32620.0  ...  42.24  42.54  42.01  42.06   \n",
+      "2017-09-11 09:32:00  44.2200  44.25  22411.0  ...  42.48  42.48  42.09  42.12   \n",
+      "2017-09-11 09:33:00  44.2504  44.28  45320.0  ...  42.20  42.49  42.18  42.49   \n",
+      "2017-09-11 09:34:00  44.2200  44.34  17614.0  ...  42.38  42.38  42.23  42.28   \n",
+      "\n",
+      "                                ZTS                                  \n",
+      "                      volume  close   high     low    open   volume  \n",
+      "timestamp                                                            \n",
+      "2017-09-11 09:30:00  26933.0  65.11  65.39  64.960  65.330  38144.0  \n",
+      "2017-09-11 09:31:00  39292.0  65.11  65.39  64.960  65.330  38144.0  \n",
+      "2017-09-11 09:32:00   9683.0  65.12  65.23  65.075  65.115   4390.0  \n",
+      "2017-09-11 09:33:00   7844.0  65.12  65.23  65.075  65.115   4390.0  \n",
+      "2017-09-11 09:34:00   6472.0  64.97  65.18  64.970  65.120   5515.0  \n",
+      "\n",
+      "[5 rows x 2510 columns]\n"
+     ]
+    }
+   ],
+   "execution_count": 6
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:32.219390Z",
+     "start_time": "2024-10-16T18:33:32.202477Z"
+    }
+   },
    "source": [
     "# Get 6 first columns\n",
     "df_features = create_features(df_cleaned.iloc[:, :5])\n"
-   ]
+   ],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Column names in the DataFrame: MultiIndex([('A',  'close'),\n",
+      "            ('A',   'high'),\n",
+      "            ('A',    'low'),\n",
+      "            ('A',   'open'),\n",
+      "            ('A', 'volume')],\n",
+      "           )\n",
+      "DataFrame with new features:\n",
+      "                          A                                             \\\n",
+      "                      close    high     low     open  volume    return   \n",
+      "timestamp                                                                \n",
+      "2017-09-11 09:50:00  65.800  65.820  65.790  65.8124  2452.0  0.000000   \n",
+      "2017-09-11 09:51:00  65.810  65.830  65.810  65.8200  2201.0  0.000152   \n",
+      "2017-09-11 09:52:00  65.850  65.850  65.820  65.8200  1100.0  0.000608   \n",
+      "2017-09-11 09:53:00  65.750  65.820  65.750  65.8200  4955.0 -0.001519   \n",
+      "2017-09-11 09:54:00  65.765  65.765  65.765  65.7650   700.0  0.000228   \n",
+      "\n",
+      "                                                                       \\\n",
+      "                           ma7       ma21 volatility open_close_ratio   \n",
+      "timestamp                                                               \n",
+      "2017-09-11 09:50:00  65.804643  65.766786   0.064814         1.000188   \n",
+      "2017-09-11 09:51:00  65.791786  65.783452   0.049973         1.000152   \n",
+      "2017-09-11 09:52:00  65.791429  65.802024   0.049473         0.999544   \n",
+      "2017-09-11 09:53:00  65.780000  65.806310   0.048305         1.001065   \n",
+      "2017-09-11 09:54:00  65.783571  65.809881   0.045709         1.000000   \n",
+      "\n",
+      "                                    \n",
+      "                    high_low_ratio  \n",
+      "timestamp                           \n",
+      "2017-09-11 09:50:00       1.000456  \n",
+      "2017-09-11 09:51:00       1.000304  \n",
+      "2017-09-11 09:52:00       1.000456  \n",
+      "2017-09-11 09:53:00       1.001065  \n",
+      "2017-09-11 09:54:00       1.000000  \n"
+     ]
+    }
+   ],
+   "execution_count": 7
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:32.255209Z",
+     "start_time": "2024-10-16T18:33:32.244695Z"
+    }
+   },
    "source": [
     "# Get data for the symbol 'A'\n",
     "df1 = df_features.loc[:, 'A']\n",
     "# Get first 6 columns\n",
     "df1 = df1.iloc[:, :5]\n",
     "df1"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   ],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "                      close    high     low     open   volume\n",
+       "timestamp                                                    \n",
+       "2017-09-11 09:50:00  65.800  65.820  65.790  65.8124   2452.0\n",
+       "2017-09-11 09:51:00  65.810  65.830  65.810  65.8200   2201.0\n",
+       "2017-09-11 09:52:00  65.850  65.850  65.820  65.8200   1100.0\n",
+       "2017-09-11 09:53:00  65.750  65.820  65.750  65.8200   4955.0\n",
+       "2017-09-11 09:54:00  65.765  65.765  65.765  65.7650    700.0\n",
+       "...                     ...     ...     ...      ...      ...\n",
+       "2018-02-16 15:55:00  72.125  72.130  72.090  72.0950  17309.0\n",
+       "2018-02-16 15:56:00  72.070  72.125  72.070  72.1250  15441.0\n",
+       "2018-02-16 15:57:00  72.060  72.100  72.050  72.0700  18096.0\n",
+       "2018-02-16 15:58:00  72.010  72.060  72.010  72.0600  22146.0\n",
+       "2018-02-16 15:59:00  71.969  72.010  71.930  72.0100  37277.0\n",
+       "\n",
+       "[43126 rows x 5 columns]"
+      ],
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>close</th>\n",
+       "      <th>high</th>\n",
+       "      <th>low</th>\n",
+       "      <th>open</th>\n",
+       "      <th>volume</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>timestamp</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>2017-09-11 09:50:00</th>\n",
+       "      <td>65.800</td>\n",
+       "      <td>65.820</td>\n",
+       "      <td>65.790</td>\n",
+       "      <td>65.8124</td>\n",
+       "      <td>2452.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-09-11 09:51:00</th>\n",
+       "      <td>65.810</td>\n",
+       "      <td>65.830</td>\n",
+       "      <td>65.810</td>\n",
+       "      <td>65.8200</td>\n",
+       "      <td>2201.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-09-11 09:52:00</th>\n",
+       "      <td>65.850</td>\n",
+       "      <td>65.850</td>\n",
+       "      <td>65.820</td>\n",
+       "      <td>65.8200</td>\n",
+       "      <td>1100.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-09-11 09:53:00</th>\n",
+       "      <td>65.750</td>\n",
+       "      <td>65.820</td>\n",
+       "      <td>65.750</td>\n",
+       "      <td>65.8200</td>\n",
+       "      <td>4955.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2017-09-11 09:54:00</th>\n",
+       "      <td>65.765</td>\n",
+       "      <td>65.765</td>\n",
+       "      <td>65.765</td>\n",
+       "      <td>65.7650</td>\n",
+       "      <td>700.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2018-02-16 15:55:00</th>\n",
+       "      <td>72.125</td>\n",
+       "      <td>72.130</td>\n",
+       "      <td>72.090</td>\n",
+       "      <td>72.0950</td>\n",
+       "      <td>17309.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2018-02-16 15:56:00</th>\n",
+       "      <td>72.070</td>\n",
+       "      <td>72.125</td>\n",
+       "      <td>72.070</td>\n",
+       "      <td>72.1250</td>\n",
+       "      <td>15441.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2018-02-16 15:57:00</th>\n",
+       "      <td>72.060</td>\n",
+       "      <td>72.100</td>\n",
+       "      <td>72.050</td>\n",
+       "      <td>72.0700</td>\n",
+       "      <td>18096.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2018-02-16 15:58:00</th>\n",
+       "      <td>72.010</td>\n",
+       "      <td>72.060</td>\n",
+       "      <td>72.010</td>\n",
+       "      <td>72.0600</td>\n",
+       "      <td>22146.0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2018-02-16 15:59:00</th>\n",
+       "      <td>71.969</td>\n",
+       "      <td>72.010</td>\n",
+       "      <td>71.930</td>\n",
+       "      <td>72.0100</td>\n",
+       "      <td>37277.0</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>43126 rows × 5 columns</p>\n",
+       "</div>"
+      ]
+     },
+     "execution_count": 8,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "execution_count": 8
+  },
+  {
+   "cell_type": "code",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:32.726107Z",
+     "start_time": "2024-10-16T18:33:32.291514Z"
+    }
+   },
    "source": [
     "# Stock symbol 'A' behaviour\n",
     "df1.plot(subplots=True, figsize=(15, 15))\n",
     "plt.suptitle('A stock attributes from 24/01/2014 to 25/06/2021', y=0.91)\n",
     "plt.show()"
-   ]
+   ],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<Figure size 1500x1500 with 5 Axes>"
+      ],
+      "image/png": ""
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "execution_count": 9
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:32.750716Z",
+     "start_time": "2024-10-16T18:33:32.744343Z"
+    }
+   },
    "source": [
     "# Split train from  11/09/2017 9:30 A.M. to 17/01/2018 11:50 A.M and test data  from 17/01/2018 11:51A.M. to 16/02/2018 03:59A.M\n",
     "train = df1.loc['2017-11-12 09:30:00':'2018-01-30 11:50:00']\n",
     "test = df1.loc['2018-01-30 11:51:00':'2018-02-16 03:59:00']\n",
     "train.shape"
-   ]
+   ],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(20219, 5)"
+      ]
+     },
+     "execution_count": 10,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "execution_count": 10
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:32.833565Z",
+     "start_time": "2024-10-16T18:33:32.796680Z"
+    }
+   },
    "source": [
     "# Standardize the data\n",
     "\n",
@@ -365,13 +695,18 @@
     "batch_size = 64\n",
     "train_loader = DataLoader(train_data, shuffle=True, batch_size=batch_size)\n",
     "test_loader = DataLoader(test_data, shuffle=False, batch_size=batch_size)\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
+   ],
    "outputs": [],
+   "execution_count": 11
+  },
+  {
+   "cell_type": "code",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:32.913546Z",
+     "start_time": "2024-10-16T18:33:32.904659Z"
+    }
+   },
    "source": [
     "from torch import nn\n",
     "\n",
@@ -387,13 +722,18 @@
     "        return x\n",
     "\n",
     "model = VanillaLSTM(5)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
+   ],
    "outputs": [],
+   "execution_count": 12
+  },
+  {
+   "cell_type": "code",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:33.573316Z",
+     "start_time": "2024-10-16T18:33:32.947515Z"
+    }
+   },
    "source": [
     "# Optiemizer and rmse loss function\n",
     "import torch.optim as optim\n",
@@ -408,13 +748,18 @@
     "\n",
     "criterion = RMSELoss()\n",
     "optimizer = optim.Adam(model.parameters(), lr=0.01)"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 13
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:33.639751Z",
+     "start_time": "2024-10-16T18:33:33.637589Z"
+    }
+   },
    "source": [
     "def train(dataloader):\n",
     "    epoch_loss = 0\n",
@@ -430,13 +775,18 @@
     "        epoch_loss += loss.item()  \n",
     "        \n",
     "    return epoch_loss"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 14
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-10-16T18:33:33.669822Z",
+     "start_time": "2024-10-16T18:33:33.667498Z"
+    }
+   },
    "source": [
     "def evaluate(dataloader):\n",
     "    epoch_loss = 0\n",
@@ -450,13 +800,20 @@
     "          epoch_loss += loss.item()  \n",
     "        \n",
     "    return epoch_loss / len(dataloader)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
+   ],
    "outputs": [],
+   "execution_count": 15
+  },
+  {
+   "cell_type": "code",
+   "metadata": {
+    "jupyter": {
+     "is_executing": true
+    },
+    "ExecuteTime": {
+     "start_time": "2024-10-16T18:33:33.697410Z"
+    }
+   },
    "source": [
     "n_epochs = 600\n",
     "best_valid_loss = float('inf')\n",
@@ -472,7 +829,9 @@
     "\n",
     "    if (epoch % 200 == 0):\n",
     "        print(f'\\tEpoch: {epoch} | ' + f'\\tTrain Loss: {train_loss:.5f} | ' + f'\\tVal Loss: {valid_loss:.5f}\\n')"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": null
   },
   {
    "cell_type": "code",
@@ -624,11 +983,11 @@
      "evalue": "operands could not be broadcast together with shapes (10,5) (10,) (10,5) ",
      "output_type": "error",
      "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[49], line 23\u001b[0m\n\u001b[0;32m     20\u001b[0m pred_mins \u001b[38;5;241m=\u001b[39m last_sequence\u001b[38;5;241m.\u001b[39msqueeze(\u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mnumpy()\n\u001b[0;32m     22\u001b[0m \u001b[38;5;66;03m# inverse transform the predicted values\u001b[39;00m\n\u001b[1;32m---> 23\u001b[0m pred_mins \u001b[38;5;241m=\u001b[39m \u001b[43mscaler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minverse_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpred_mins\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     25\u001b[0m df_pred \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(\n\u001b[0;32m     26\u001b[0m     data\u001b[38;5;241m=\u001b[39mpred_mins,\n\u001b[0;32m     27\u001b[0m     columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Open>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<High>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Low>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Close>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Volume>\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     28\u001b[0m )\n\u001b[0;32m     30\u001b[0m df_pred\n",
-      "File \u001b[1;32mc:\\Users\\LT MSI\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\preprocessing\\_data.py:1064\u001b[0m, in \u001b[0;36mStandardScaler.inverse_transform\u001b[1;34m(self, X, copy)\u001b[0m\n\u001b[0;32m   1062\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1063\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwith_std:\n\u001b[1;32m-> 1064\u001b[0m         \u001b[43mX\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscale_\u001b[49m\n\u001b[0;32m   1065\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwith_mean:\n\u001b[0;32m   1066\u001b[0m         X \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmean_\n",
-      "\u001b[1;31mValueError\u001b[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) "
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mValueError\u001B[0m                                Traceback (most recent call last)",
+      "Cell \u001B[1;32mIn[49], line 23\u001B[0m\n\u001B[0;32m     20\u001B[0m pred_mins \u001B[38;5;241m=\u001B[39m last_sequence\u001B[38;5;241m.\u001B[39msqueeze(\u001B[38;5;241m0\u001B[39m)\u001B[38;5;241m.\u001B[39mnumpy()\n\u001B[0;32m     22\u001B[0m \u001B[38;5;66;03m# inverse transform the predicted values\u001B[39;00m\n\u001B[1;32m---> 23\u001B[0m pred_mins \u001B[38;5;241m=\u001B[39m \u001B[43mscaler\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43minverse_transform\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpred_mins\u001B[49m\u001B[43m)\u001B[49m\n\u001B[0;32m     25\u001B[0m df_pred \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mDataFrame(\n\u001B[0;32m     26\u001B[0m     data\u001B[38;5;241m=\u001B[39mpred_mins,\n\u001B[0;32m     27\u001B[0m     columns\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Open>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<High>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Low>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Close>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Volume>\u001B[39m\u001B[38;5;124m'\u001B[39m]\n\u001B[0;32m     28\u001B[0m )\n\u001B[0;32m     30\u001B[0m df_pred\n",
+      "File \u001B[1;32mc:\\Users\\LT MSI\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\preprocessing\\_data.py:1064\u001B[0m, in \u001B[0;36mStandardScaler.inverse_transform\u001B[1;34m(self, X, copy)\u001B[0m\n\u001B[0;32m   1062\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m   1063\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mwith_std:\n\u001B[1;32m-> 1064\u001B[0m         \u001B[43mX\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mscale_\u001B[49m\n\u001B[0;32m   1065\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mwith_mean:\n\u001B[0;32m   1066\u001B[0m         X \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mmean_\n",
+      "\u001B[1;31mValueError\u001B[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) "
      ]
     }
    ],
@@ -674,11 +1033,11 @@
      "evalue": "operands could not be broadcast together with shapes (10,5) (10,) (10,5) ",
      "output_type": "error",
      "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[50], line 23\u001b[0m\n\u001b[0;32m     20\u001b[0m pred_mins \u001b[38;5;241m=\u001b[39m last_sequence\u001b[38;5;241m.\u001b[39msqueeze(\u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mnumpy()\n\u001b[0;32m     22\u001b[0m \u001b[38;5;66;03m# inverse transform the predicted values\u001b[39;00m\n\u001b[1;32m---> 23\u001b[0m pred_mins \u001b[38;5;241m=\u001b[39m \u001b[43mscaler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minverse_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpred_mins\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     25\u001b[0m df_pred \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(\n\u001b[0;32m     26\u001b[0m     data\u001b[38;5;241m=\u001b[39mpred_mins,\n\u001b[0;32m     27\u001b[0m     columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Open>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<High>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Low>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Close>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Volume>\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     28\u001b[0m )\n",
-      "File \u001b[1;32mc:\\Users\\LT MSI\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\preprocessing\\_data.py:1064\u001b[0m, in \u001b[0;36mStandardScaler.inverse_transform\u001b[1;34m(self, X, copy)\u001b[0m\n\u001b[0;32m   1062\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1063\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwith_std:\n\u001b[1;32m-> 1064\u001b[0m         \u001b[43mX\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscale_\u001b[49m\n\u001b[0;32m   1065\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwith_mean:\n\u001b[0;32m   1066\u001b[0m         X \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmean_\n",
-      "\u001b[1;31mValueError\u001b[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) "
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mValueError\u001B[0m                                Traceback (most recent call last)",
+      "Cell \u001B[1;32mIn[50], line 23\u001B[0m\n\u001B[0;32m     20\u001B[0m pred_mins \u001B[38;5;241m=\u001B[39m last_sequence\u001B[38;5;241m.\u001B[39msqueeze(\u001B[38;5;241m0\u001B[39m)\u001B[38;5;241m.\u001B[39mnumpy()\n\u001B[0;32m     22\u001B[0m \u001B[38;5;66;03m# inverse transform the predicted values\u001B[39;00m\n\u001B[1;32m---> 23\u001B[0m pred_mins \u001B[38;5;241m=\u001B[39m \u001B[43mscaler\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43minverse_transform\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpred_mins\u001B[49m\u001B[43m)\u001B[49m\n\u001B[0;32m     25\u001B[0m df_pred \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mDataFrame(\n\u001B[0;32m     26\u001B[0m     data\u001B[38;5;241m=\u001B[39mpred_mins,\n\u001B[0;32m     27\u001B[0m     columns\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Open>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<High>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Low>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Close>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Volume>\u001B[39m\u001B[38;5;124m'\u001B[39m]\n\u001B[0;32m     28\u001B[0m )\n",
+      "File \u001B[1;32mc:\\Users\\LT MSI\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\preprocessing\\_data.py:1064\u001B[0m, in \u001B[0;36mStandardScaler.inverse_transform\u001B[1;34m(self, X, copy)\u001B[0m\n\u001B[0;32m   1062\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m   1063\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mwith_std:\n\u001B[1;32m-> 1064\u001B[0m         \u001B[43mX\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mscale_\u001B[49m\n\u001B[0;32m   1065\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mwith_mean:\n\u001B[0;32m   1066\u001B[0m         X \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mmean_\n",
+      "\u001B[1;31mValueError\u001B[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) "
      ]
     }
    ],
@@ -723,11 +1082,11 @@
      "evalue": "operands could not be broadcast together with shapes (10,5) (10,) (10,5) ",
      "output_type": "error",
      "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "Cell \u001b[1;32mIn[51], line 23\u001b[0m\n\u001b[0;32m     20\u001b[0m pred_mins \u001b[38;5;241m=\u001b[39m last_sequence\u001b[38;5;241m.\u001b[39msqueeze(\u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mnumpy()\n\u001b[0;32m     22\u001b[0m \u001b[38;5;66;03m# inverse transform the predicted values\u001b[39;00m\n\u001b[1;32m---> 23\u001b[0m pred_days \u001b[38;5;241m=\u001b[39m \u001b[43mscaler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minverse_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpred_days\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     25\u001b[0m df_pred \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(\n\u001b[0;32m     26\u001b[0m     data\u001b[38;5;241m=\u001b[39mpred_days,\n\u001b[0;32m     27\u001b[0m     columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Open>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<High>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Low>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Close>\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m<Volume>\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     28\u001b[0m )\n",
-      "File \u001b[1;32mc:\\Users\\LT MSI\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\preprocessing\\_data.py:1064\u001b[0m, in \u001b[0;36mStandardScaler.inverse_transform\u001b[1;34m(self, X, copy)\u001b[0m\n\u001b[0;32m   1062\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1063\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwith_std:\n\u001b[1;32m-> 1064\u001b[0m         \u001b[43mX\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscale_\u001b[49m\n\u001b[0;32m   1065\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwith_mean:\n\u001b[0;32m   1066\u001b[0m         X \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmean_\n",
-      "\u001b[1;31mValueError\u001b[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) "
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mValueError\u001B[0m                                Traceback (most recent call last)",
+      "Cell \u001B[1;32mIn[51], line 23\u001B[0m\n\u001B[0;32m     20\u001B[0m pred_mins \u001B[38;5;241m=\u001B[39m last_sequence\u001B[38;5;241m.\u001B[39msqueeze(\u001B[38;5;241m0\u001B[39m)\u001B[38;5;241m.\u001B[39mnumpy()\n\u001B[0;32m     22\u001B[0m \u001B[38;5;66;03m# inverse transform the predicted values\u001B[39;00m\n\u001B[1;32m---> 23\u001B[0m pred_days \u001B[38;5;241m=\u001B[39m \u001B[43mscaler\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43minverse_transform\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpred_days\u001B[49m\u001B[43m)\u001B[49m\n\u001B[0;32m     25\u001B[0m df_pred \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mDataFrame(\n\u001B[0;32m     26\u001B[0m     data\u001B[38;5;241m=\u001B[39mpred_days,\n\u001B[0;32m     27\u001B[0m     columns\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Open>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<High>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Low>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Close>\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m<Volume>\u001B[39m\u001B[38;5;124m'\u001B[39m]\n\u001B[0;32m     28\u001B[0m )\n",
+      "File \u001B[1;32mc:\\Users\\LT MSI\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\preprocessing\\_data.py:1064\u001B[0m, in \u001B[0;36mStandardScaler.inverse_transform\u001B[1;34m(self, X, copy)\u001B[0m\n\u001B[0;32m   1062\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m   1063\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mwith_std:\n\u001B[1;32m-> 1064\u001B[0m         \u001B[43mX\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mscale_\u001B[49m\n\u001B[0;32m   1065\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mwith_mean:\n\u001B[0;32m   1066\u001B[0m         X \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mmean_\n",
+      "\u001B[1;31mValueError\u001B[0m: operands could not be broadcast together with shapes (10,5) (10,) (10,5) "
      ]
     }
    ],
@@ -1007,7 +1366,7 @@
     "    columns=['<Open>', '<High>', '<Low>', '<Close>', '<Volume>', '<EMA12>', '<EMA26>', '<MACD>', '<Boillinger Up>', '<Boillinger Down>']\n",
     ")\n",
     "\n",
-    "print(def_pred)"
+    "print(df_pred)"
    ]
   }
  ],
